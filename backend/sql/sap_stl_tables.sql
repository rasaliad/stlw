-- Tabla para Items/Artículos de SAP-STL
CREATE TABLE STL_ITEMS (
    ID INTEGER NOT NULL,
    CODIGO_PRODUCTO VARCHAR(50),
    DESCRIPCION_PRODUCTO VARCHAR(255),
    CODIGO_PRODUCTO_ERP VARCHAR(50),
    CODIGO_FAMILIA INTEGER,
    NOMBRE_FAMILIA VARCHAR(100),
    DIAS_VENCIMIENTO INTEGER,
    CODIGO_UMB VARCHAR(20),
    DESCRIPCION_UMB VARCHAR(100),
    CODIGO_FORMA_EMBALAJE VARCHAR(20),
    NOMBRE_FORMA_EMBALAJE VARCHAR(100),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    SYNC_STATUS VARCHAR(20) DEFAULT 'PENDING',
    LAST_SYNC_AT TIMESTAMP,
    CONSTRAINT PK_STL_ITEMS PRIMARY KEY (ID)
);

CREATE GENERATOR GEN_STL_ITEMS_ID;
CREATE TRIGGER BI_STL_ITEMS_ID FOR STL_ITEMS ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.ID IS NULL) THEN
        NEW.ID = GEN_ID(GEN_STL_ITEMS_ID, 1);
END;

CREATE UNIQUE INDEX IDX_STL_ITEMS_CODIGO ON STL_ITEMS(CODIGO_PRODUCTO);
CREATE INDEX IDX_STL_ITEMS_FAMILIA ON STL_ITEMS(CODIGO_FAMILIA);
CREATE INDEX IDX_STL_ITEMS_SYNC ON STL_ITEMS(SYNC_STATUS, LAST_SYNC_AT);

-- Tabla para Despachos
CREATE TABLE STL_DISPATCHES (
    ID INTEGER NOT NULL,
    NUMERO_DESPACHO INTEGER,
    NUMERO_BUSQUEDA INTEGER,
    FECHA_CREACION VARCHAR(50),
    FECHA_PICKING TIMESTAMP,
    FECHA_CARGA VARCHAR(50),
    CODIGO_CLIENTE VARCHAR(50),
    NOMBRE_CLIENTE VARCHAR(255),
    TIPO_DESPACHO INTEGER NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    SYNC_STATUS VARCHAR(20) DEFAULT 'PENDING',
    LAST_SYNC_AT TIMESTAMP,
    CONSTRAINT PK_STL_DISPATCHES PRIMARY KEY (ID)
);

CREATE GENERATOR GEN_STL_DISPATCHES_ID;
CREATE TRIGGER BI_STL_DISPATCHES_ID FOR STL_DISPATCHES ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.ID IS NULL) THEN
        NEW.ID = GEN_ID(GEN_STL_DISPATCHES_ID, 1);
END;

CREATE INDEX IDX_STL_DISPATCH_NUM ON STL_DISPATCHES(NUMERO_DESPACHO);
CREATE INDEX IDX_STL_DISPATCH_CLIENT ON STL_DISPATCHES(CODIGO_CLIENTE);
CREATE INDEX IDX_STL_DISPATCH_TYPE ON STL_DISPATCHES(TIPO_DESPACHO);
CREATE INDEX IDX_STL_DISPATCH_DATE ON STL_DISPATCHES(FECHA_PICKING);
CREATE INDEX IDX_STL_DISPATCH_SYNC ON STL_DISPATCHES(SYNC_STATUS, LAST_SYNC_AT);

-- Tabla para Líneas de Despacho
CREATE TABLE STL_DISPATCH_LINES (
    ID INTEGER NOT NULL,
    DISPATCH_ID INTEGER NOT NULL,
    CODIGO_PRODUCTO VARCHAR(50),
    NOMBRE_PRODUCTO VARCHAR(255),
    ALMACEN VARCHAR(20),
    CANTIDAD_UMB DECIMAL(18,6),
    LINE_NUM INTEGER,
    UOM_CODE VARCHAR(20),
    UOM_ENTRY INTEGER,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT PK_STL_DISPATCH_LINES PRIMARY KEY (ID),
    CONSTRAINT FK_STL_DISPATCH_LINES FOREIGN KEY (DISPATCH_ID) REFERENCES STL_DISPATCHES(ID)
);

CREATE GENERATOR GEN_STL_DISPATCH_LINES_ID;
CREATE TRIGGER BI_STL_DISPATCH_LINES_ID FOR STL_DISPATCH_LINES ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.ID IS NULL) THEN
        NEW.ID = GEN_ID(GEN_STL_DISPATCH_LINES_ID, 1);
END;

CREATE INDEX IDX_STL_DISPATCH_LINES_DISPATCH ON STL_DISPATCH_LINES(DISPATCH_ID);
CREATE INDEX IDX_STL_DISPATCH_LINES_PRODUCT ON STL_DISPATCH_LINES(CODIGO_PRODUCTO);

-- Tabla para Recepciones de Mercancía
CREATE TABLE STL_GOODS_RECEIPTS (
    ID INTEGER NOT NULL,
    NUMERO_DOCUMENTO INTEGER,
    NUMERO_BUSQUEDA INTEGER,
    FECHA TIMESTAMP,
    TIPO_RECEPCION INTEGER,
    CODIGO_SUPLIDOR VARCHAR(50),
    NOMBRE_SUPLIDOR VARCHAR(255),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    SYNC_STATUS VARCHAR(20) DEFAULT 'PENDING',
    LAST_SYNC_AT TIMESTAMP,
    CONSTRAINT PK_STL_GOODS_RECEIPTS PRIMARY KEY (ID)
);

CREATE GENERATOR GEN_STL_GOODS_RECEIPTS_ID;
CREATE TRIGGER BI_STL_GOODS_RECEIPTS_ID FOR STL_GOODS_RECEIPTS ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.ID IS NULL) THEN
        NEW.ID = GEN_ID(GEN_STL_GOODS_RECEIPTS_ID, 1);
END;

CREATE INDEX IDX_STL_RECEIPT_NUM ON STL_GOODS_RECEIPTS(NUMERO_DOCUMENTO);
CREATE INDEX IDX_STL_RECEIPT_SUPPLIER ON STL_GOODS_RECEIPTS(CODIGO_SUPLIDOR);
CREATE INDEX IDX_STL_RECEIPT_TYPE ON STL_GOODS_RECEIPTS(TIPO_RECEPCION);
CREATE INDEX IDX_STL_RECEIPT_DATE ON STL_GOODS_RECEIPTS(FECHA);
CREATE INDEX IDX_STL_RECEIPT_SYNC ON STL_GOODS_RECEIPTS(SYNC_STATUS, LAST_SYNC_AT);

-- Tabla para Líneas de Recepción de Mercancía
CREATE TABLE STL_GOODS_RECEIPT_LINES (
    ID INTEGER NOT NULL,
    RECEIPT_ID INTEGER NOT NULL,
    CODIGO_PRODUCTO VARCHAR(50),
    NOMBRE_PRODUCTO VARCHAR(255),
    CODIGO_FAMILIA INTEGER,
    NOMBRE_FAMILIA VARCHAR(100),
    CANTIDAD DECIMAL(18,6),
    UNIDAD_DE_MEDIDA_UMB VARCHAR(20),
    LINE_NUM INTEGER,
    UOM_ENTRY INTEGER,
    UOM_CODE VARCHAR(20),
    DIAS_VENCIMIENTO INTEGER,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT PK_STL_GOODS_RECEIPT_LINES PRIMARY KEY (ID),
    CONSTRAINT FK_STL_GOODS_RECEIPT_LINES FOREIGN KEY (RECEIPT_ID) REFERENCES STL_GOODS_RECEIPTS(ID)
);

CREATE GENERATOR GEN_STL_GOODS_RECEIPT_LINES_ID;
CREATE TRIGGER BI_STL_GOODS_RECEIPT_LINES_ID FOR STL_GOODS_RECEIPT_LINES ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.ID IS NULL) THEN
        NEW.ID = GEN_ID(GEN_STL_GOODS_RECEIPT_LINES_ID, 1);
END;

CREATE INDEX IDX_STL_RECEIPT_LINES_RECEIPT ON STL_GOODS_RECEIPT_LINES(RECEIPT_ID);
CREATE INDEX IDX_STL_RECEIPT_LINES_PRODUCT ON STL_GOODS_RECEIPT_LINES(CODIGO_PRODUCTO);

-- Tabla para Movimientos de Inventario (Issues)
CREATE TABLE STL_INVENTORY_ISSUES (
    ID INTEGER NOT NULL,
    FECHA_CREACION TIMESTAMP,
    TIPO_DESPACHO INTEGER NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    SYNC_STATUS VARCHAR(20) DEFAULT 'PENDING',
    LAST_SYNC_AT TIMESTAMP,
    CONSTRAINT PK_STL_INVENTORY_ISSUES PRIMARY KEY (ID)
);

CREATE GENERATOR GEN_STL_INVENTORY_ISSUES_ID;
CREATE TRIGGER BI_STL_INVENTORY_ISSUES_ID FOR STL_INVENTORY_ISSUES ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.ID IS NULL) THEN
        NEW.ID = GEN_ID(GEN_STL_INVENTORY_ISSUES_ID, 1);
END;

CREATE INDEX IDX_STL_INV_ISSUE_TYPE ON STL_INVENTORY_ISSUES(TIPO_DESPACHO);
CREATE INDEX IDX_STL_INV_ISSUE_DATE ON STL_INVENTORY_ISSUES(FECHA_CREACION);
CREATE INDEX IDX_STL_INV_ISSUE_SYNC ON STL_INVENTORY_ISSUES(SYNC_STATUS, LAST_SYNC_AT);

-- Tabla para Líneas de Salida de Inventario
CREATE TABLE STL_INVENTORY_ISSUE_LINES (
    ID INTEGER NOT NULL,
    ISSUE_ID INTEGER NOT NULL,
    CODIGO_PRODUCTO VARCHAR(50),
    CANTIDAD_UMB DECIMAL(18,6) NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT PK_STL_INVENTORY_ISSUE_LINES PRIMARY KEY (ID),
    CONSTRAINT FK_STL_INVENTORY_ISSUE_LINES FOREIGN KEY (ISSUE_ID) REFERENCES STL_INVENTORY_ISSUES(ID)
);

CREATE GENERATOR GEN_STL_INV_ISSUE_LINES_ID;
CREATE TRIGGER BI_STL_INV_ISSUE_LINES_ID FOR STL_INVENTORY_ISSUE_LINES ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.ID IS NULL) THEN
        NEW.ID = GEN_ID(GEN_STL_INV_ISSUE_LINES_ID, 1);
END;

CREATE INDEX IDX_STL_INV_ISSUE_LINES_ISSUE ON STL_INVENTORY_ISSUE_LINES(ISSUE_ID);
CREATE INDEX IDX_STL_INV_ISSUE_LINES_PRODUCT ON STL_INVENTORY_ISSUE_LINES(CODIGO_PRODUCTO);

-- Tabla para Entradas de Inventario
CREATE TABLE STL_INVENTORY_RECEIPTS (
    ID INTEGER NOT NULL,
    FECHA_CREACION TIMESTAMP,
    TIPO_RECEPCION INTEGER NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    SYNC_STATUS VARCHAR(20) DEFAULT 'PENDING',
    LAST_SYNC_AT TIMESTAMP,
    CONSTRAINT PK_STL_INVENTORY_RECEIPTS PRIMARY KEY (ID)
);

CREATE GENERATOR GEN_STL_INVENTORY_RECEIPTS_ID;
CREATE TRIGGER BI_STL_INVENTORY_RECEIPTS_ID FOR STL_INVENTORY_RECEIPTS ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.ID IS NULL) THEN
        NEW.ID = GEN_ID(GEN_STL_INVENTORY_RECEIPTS_ID, 1);
END;

CREATE INDEX IDX_STL_INV_RECEIPT_TYPE ON STL_INVENTORY_RECEIPTS(TIPO_RECEPCION);
CREATE INDEX IDX_STL_INV_RECEIPT_DATE ON STL_INVENTORY_RECEIPTS(FECHA_CREACION);
CREATE INDEX IDX_STL_INV_RECEIPT_SYNC ON STL_INVENTORY_RECEIPTS(SYNC_STATUS, LAST_SYNC_AT);

-- Tabla para Líneas de Entrada de Inventario
CREATE TABLE STL_INVENTORY_RECEIPT_LINES (
    ID INTEGER NOT NULL,
    RECEIPT_ID INTEGER NOT NULL,
    CODIGO_PRODUCTO VARCHAR(50),
    CANTIDAD_UMB DECIMAL(18,6) NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT PK_STL_INVENTORY_RECEIPT_LINES PRIMARY KEY (ID),
    CONSTRAINT FK_STL_INVENTORY_RECEIPT_LINES FOREIGN KEY (RECEIPT_ID) REFERENCES STL_INVENTORY_RECEIPTS(ID)
);

CREATE GENERATOR GEN_STL_INV_RECEIPT_LINES_ID;
CREATE TRIGGER BI_STL_INV_RECEIPT_LINES_ID FOR STL_INVENTORY_RECEIPT_LINES ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.ID IS NULL) THEN
        NEW.ID = GEN_ID(GEN_STL_INV_RECEIPT_LINES_ID, 1);
END;

CREATE INDEX IDX_STL_INV_RECEIPT_LINES_RECEIPT ON STL_INVENTORY_RECEIPT_LINES(RECEIPT_ID);
CREATE INDEX IDX_STL_INV_RECEIPT_LINES_PRODUCT ON STL_INVENTORY_RECEIPT_LINES(CODIGO_PRODUCTO);

-- Tabla para Transferencias de Inventario
CREATE TABLE STL_INVENTORY_TRANSFERS (
    ID INTEGER NOT NULL,
    FECHA_CREACION TIMESTAMP,
    TIPO_DESPACHO INTEGER NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    SYNC_STATUS VARCHAR(20) DEFAULT 'PENDING',
    LAST_SYNC_AT TIMESTAMP,
    CONSTRAINT PK_STL_INVENTORY_TRANSFERS PRIMARY KEY (ID)
);

CREATE GENERATOR GEN_STL_INVENTORY_TRANSFERS_ID;
CREATE TRIGGER BI_STL_INVENTORY_TRANSFERS_ID FOR STL_INVENTORY_TRANSFERS ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.ID IS NULL) THEN
        NEW.ID = GEN_ID(GEN_STL_INVENTORY_TRANSFERS_ID, 1);
END;

CREATE INDEX IDX_STL_INV_TRANSFER_TYPE ON STL_INVENTORY_TRANSFERS(TIPO_DESPACHO);
CREATE INDEX IDX_STL_INV_TRANSFER_DATE ON STL_INVENTORY_TRANSFERS(FECHA_CREACION);
CREATE INDEX IDX_STL_INV_TRANSFER_SYNC ON STL_INVENTORY_TRANSFERS(SYNC_STATUS, LAST_SYNC_AT);

-- Tabla para Líneas de Transferencia de Inventario
CREATE TABLE STL_INVENTORY_TRANSFER_LINES (
    ID INTEGER NOT NULL,
    TRANSFER_ID INTEGER NOT NULL,
    CODIGO_PRODUCTO VARCHAR(50),
    CANTIDAD_UMB DECIMAL(18,6) NOT NULL,
    ALMACEN VARCHAR(20),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT PK_STL_INVENTORY_TRANSFER_LINES PRIMARY KEY (ID),
    CONSTRAINT FK_STL_INVENTORY_TRANSFER_LINES FOREIGN KEY (TRANSFER_ID) REFERENCES STL_INVENTORY_TRANSFERS(ID)
);

CREATE GENERATOR GEN_STL_INV_TRANSFER_LINES_ID;
CREATE TRIGGER BI_STL_INV_TRANSFER_LINES_ID FOR STL_INVENTORY_TRANSFER_LINES ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.ID IS NULL) THEN
        NEW.ID = GEN_ID(GEN_STL_INV_TRANSFER_LINES_ID, 1);
END;

CREATE INDEX IDX_STL_INV_TRANSFER_LINES_TRANSFER ON STL_INVENTORY_TRANSFER_LINES(TRANSFER_ID);
CREATE INDEX IDX_STL_INV_TRANSFER_LINES_PRODUCT ON STL_INVENTORY_TRANSFER_LINES(CODIGO_PRODUCTO);

-- Tabla de control de sincronización STL
CREATE TABLE STL_SYNC_LOG (
    ID INTEGER NOT NULL,
    ENTITY_TYPE VARCHAR(50) NOT NULL,
    ENTITY_ID VARCHAR(100),
    OPERATION VARCHAR(20) NOT NULL, -- FETCH, CREATE, UPDATE
    STATUS VARCHAR(20) NOT NULL, -- SUCCESS, ERROR, PENDING
    ERROR_MESSAGE BLOB SUB_TYPE TEXT,
    SYNC_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PROCESSING_TIME INTEGER, -- en milisegundos
    RETRY_COUNT INTEGER DEFAULT 0,
    LAST_RETRY_AT TIMESTAMP,
    CONSTRAINT PK_STL_SYNC_LOG PRIMARY KEY (ID)
);

CREATE GENERATOR GEN_STL_SYNC_LOG_ID;
CREATE TRIGGER BI_STL_SYNC_LOG_ID FOR STL_SYNC_LOG ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.ID IS NULL) THEN
        NEW.ID = GEN_ID(GEN_STL_SYNC_LOG_ID, 1);
END;

CREATE INDEX IDX_STL_SYNC_LOG_ENTITY ON STL_SYNC_LOG(ENTITY_TYPE, ENTITY_ID);
CREATE INDEX IDX_STL_SYNC_LOG_STATUS ON STL_SYNC_LOG(STATUS);
CREATE INDEX IDX_STL_SYNC_LOG_DATE ON STL_SYNC_LOG(SYNC_DATE);

-- Configuración de sincronización STL
CREATE TABLE STL_SYNC_CONFIG (
    ID INTEGER NOT NULL,
    ENTITY_TYPE VARCHAR(50) NOT NULL,
    SYNC_ENABLED VARCHAR(1) DEFAULT 'Y',
    SYNC_INTERVAL_MINUTES INTEGER DEFAULT 60,
    LAST_SYNC_AT TIMESTAMP,
    NEXT_SYNC_AT TIMESTAMP,
    BATCH_SIZE INTEGER DEFAULT 100,
    MAX_RETRIES INTEGER DEFAULT 3,
    API_ENDPOINT VARCHAR(255),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT PK_STL_SYNC_CONFIG PRIMARY KEY (ID)
);

CREATE GENERATOR GEN_STL_SYNC_CONFIG_ID;
CREATE TRIGGER BI_STL_SYNC_CONFIG_ID FOR STL_SYNC_CONFIG ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    IF (NEW.ID IS NULL) THEN
        NEW.ID = GEN_ID(GEN_STL_SYNC_CONFIG_ID, 1);
END;

CREATE UNIQUE INDEX IDX_STL_SYNC_CONFIG_ENTITY ON STL_SYNC_CONFIG(ENTITY_TYPE);

-- Datos iniciales de configuración STL
INSERT INTO STL_SYNC_CONFIG (ENTITY_TYPE, SYNC_ENABLED, SYNC_INTERVAL_MINUTES, BATCH_SIZE, MAX_RETRIES, API_ENDPOINT)
VALUES ('ITEMS', 'Y', 60, 100, 3, '/MasterData/Items');

INSERT INTO STL_SYNC_CONFIG (ENTITY_TYPE, SYNC_ENABLED, SYNC_INTERVAL_MINUTES, BATCH_SIZE, MAX_RETRIES, API_ENDPOINT)
VALUES ('DISPATCHES', 'Y', 30, 50, 3, '/Transaction/Orders');

INSERT INTO STL_SYNC_CONFIG (ENTITY_TYPE, SYNC_ENABLED, SYNC_INTERVAL_MINUTES, BATCH_SIZE, MAX_RETRIES, API_ENDPOINT)
VALUES ('GOODS_RECEIPTS', 'Y', 30, 50, 3, '/Transaction/GoodsReceipt');

INSERT INTO STL_SYNC_CONFIG (ENTITY_TYPE, SYNC_ENABLED, SYNC_INTERVAL_MINUTES, BATCH_SIZE, MAX_RETRIES, API_ENDPOINT)
VALUES ('PROCUREMENT_ORDERS', 'Y', 60, 50, 3, '/Transaction/ProcurementOrders');

COMMIT;